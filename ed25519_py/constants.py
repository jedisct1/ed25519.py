"""Ed25519 mathematical constants."""

# Field prime: p = 2^255 - 19
P = 2**255 - 19

# Edwards curve parameter: d = -121665/121666 mod p
D = -121665 * pow(121666, P - 2, P) % P

# Base point order: L = 2^252 + 27742317777372353535851937790883648493
L = 2**252 + 27742317777372353535851937790883648493

# Cofactor
COFACTOR = 8

# Base point B has y = 4/5 (mod p)
B_Y = 4 * pow(5, P - 2, P) % P

# Calculate B_X from curve equation: -x^2 + y^2 = 1 + d*x^2*y^2
# Rearranging: x^2 = (y^2 - 1) / (d*y^2 + 1)
y2 = (B_Y * B_Y) % P
numerator = (y2 - 1) % P
denominator = (D * y2 + 1) % P
x2 = (numerator * pow(denominator, P - 2, P)) % P

# Take the positive square root (smallest value)
B_X = pow(x2, (P + 3) // 8, P)
if (B_X * B_X) % P != x2:
    B_X = (B_X * pow(2, (P - 1) // 4, P)) % P

# Ensure we have the positive x coordinate (even)
if B_X % 2 == 1:
    B_X = P - B_X

# Small order points for rejection (canonical encodings)
# These are the points with order 1, 2, 4, or 8
SMALL_ORDER_POINTS = [
    # Identity point (0, 1) - order 1
    bytes([1] + [0] * 31),
    # Point (0, -1) - order 2
    bytes(
        [
            0xEC,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
        ]
    ),
    # Points of order 4
    bytes(
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]
    ),
    bytes(
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0x80,
        ]
    ),
    # Points of order 8 (canonical encodings)
    # These will be properly defined based on the curve
    bytes(
        [
            0x26,
            0xE8,
            0x95,
            0x8F,
            0xC2,
            0xB2,
            0x27,
            0xB0,
            0x45,
            0xC3,
            0xF4,
            0x89,
            0xF2,
            0xEF,
            0x98,
            0xF0,
            0xD5,
            0xDF,
            0xAC,
            0x05,
            0xD3,
            0xC6,
            0x33,
            0x39,
            0xB1,
            0x38,
            0x02,
            0x88,
            0x6D,
            0x53,
            0xFC,
            0x05,
        ]
    ),
    bytes(
        [
            0xC7,
            0x17,
            0x6A,
            0x70,
            0x3D,
            0x4D,
            0xD8,
            0x4F,
            0xBA,
            0x3C,
            0x0B,
            0x76,
            0x0D,
            0x10,
            0x67,
            0x0F,
            0x2A,
            0x20,
            0x53,
            0xFA,
            0x2C,
            0x39,
            0xCC,
            0xC6,
            0x4E,
            0xC7,
            0xFD,
            0x77,
            0x92,
            0xAC,
            0x03,
            0x7A,
        ]
    ),
    bytes(
        [
            0x13,
            0xE8,
            0x95,
            0x8F,
            0xC2,
            0xB2,
            0x27,
            0xB0,
            0x45,
            0xC3,
            0xF4,
            0x89,
            0xF2,
            0xEF,
            0x98,
            0xF0,
            0xD5,
            0xDF,
            0xAC,
            0x05,
            0xD3,
            0xC6,
            0x33,
            0x39,
            0xB1,
            0x38,
            0x02,
            0x88,
            0x6D,
            0x53,
            0xFC,
            0x85,
        ]
    ),
    bytes(
        [
            0xB4,
            0x17,
            0x6A,
            0x70,
            0x3D,
            0x4D,
            0xD8,
            0x4F,
            0xBA,
            0x3C,
            0x0B,
            0x76,
            0x0D,
            0x10,
            0x67,
            0x0F,
            0x2A,
            0x20,
            0x53,
            0xFA,
            0x2C,
            0x39,
            0xCC,
            0xC6,
            0x4E,
            0xC7,
            0xFD,
            0x77,
            0x92,
            0xAC,
            0x03,
            0xFA,
        ]
    ),
    bytes(
        [
            0xC7,
            0x17,
            0x6A,
            0x70,
            0x3D,
            0x4D,
            0xD8,
            0x4F,
            0xBA,
            0x3C,
            0x0B,
            0x76,
            0x0D,
            0x10,
            0x67,
            0x0F,
            0x2A,
            0x20,
            0x53,
            0xFA,
            0x2C,
            0x39,
            0xCC,
            0xC6,
            0x4E,
            0xC7,
            0xFD,
            0x77,
            0x92,
            0xAC,
            0x03,
            0xFA,
        ]
    ),
    bytes(
        [
            0xEC,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
        ]
    ),
]

# Non-canonical encodings that should also be rejected
NON_CANONICAL_SMALL_ORDER_POINTS = [
    # Non-canonical identity
    bytes(
        [
            0xED,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
        ]
    ),
    # Non-canonical (0, -1)
    bytes(
        [
            0xEE,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
        ]
    ),
    # More non-canonical encodings
    bytes(
        [
            0xED,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
        ]
    ),
    bytes(
        [
            0xEE,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
            0xFF,
        ]
    ),
]

# All small order point encodings to reject
ALL_SMALL_ORDER_POINTS = SMALL_ORDER_POINTS + NON_CANONICAL_SMALL_ORDER_POINTS
